{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "474d0529",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:03.051962Z",
     "iopub.status.busy": "2025-08-18T10:54:03.051626Z",
     "iopub.status.idle": "2025-08-18T10:54:26.499610Z",
     "shell.execute_reply": "2025-08-18T10:54:26.498799Z"
    },
    "papermill": {
     "duration": 23.455708,
     "end_time": "2025-08-18T10:54:26.501256",
     "exception": false,
     "start_time": "2025-08-18T10:54:03.045548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-18 10:54:08.248038: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1755514448.595099      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1755514448.692881      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.model_selection import train_test_split\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import seaborn as sns\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9155f8e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:26.511785Z",
     "iopub.status.busy": "2025-08-18T10:54:26.511230Z",
     "iopub.status.idle": "2025-08-18T10:54:26.515416Z",
     "shell.execute_reply": "2025-08-18T10:54:26.514681Z"
    },
    "papermill": {
     "duration": 0.010563,
     "end_time": "2025-08-18T10:54:26.516736",
     "exception": false,
     "start_time": "2025-08-18T10:54:26.506173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "base_dir = \"/kaggle/input/data-256-256-new/data_256_256_new\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a304db6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:26.526248Z",
     "iopub.status.busy": "2025-08-18T10:54:26.526040Z",
     "iopub.status.idle": "2025-08-18T10:54:27.240083Z",
     "shell.execute_reply": "2025-08-18T10:54:27.239109Z"
    },
    "papermill": {
     "duration": 0.72025,
     "end_time": "2025-08-18T10:54:27.241360",
     "exception": false,
     "start_time": "2025-08-18T10:54:26.521110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                id label                                           filepath\n",
      "0  Red/Red (1).jpg   Red  /kaggle/input/data-256-256-new/data_256_256_ne...\n",
      "1  Red/Red (2).jpg   Red  /kaggle/input/data-256-256-new/data_256_256_ne...\n",
      "2  Red/Red (3).jpg   Red  /kaggle/input/data-256-256-new/data_256_256_ne...\n",
      "3  Red/Red (4).jpg   Red  /kaggle/input/data-256-256-new/data_256_256_ne...\n",
      "4  Red/Red (5).jpg   Red  /kaggle/input/data-256-256-new/data_256_256_ne...\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_excel(f\"{base_dir}/labels.xlsx\")\n",
    "\n",
    "# full file paths\n",
    "df[\"filepath\"] = df[\"id\"].apply(lambda x: os.path.join(base_dir, x))\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5b858f51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:27.251118Z",
     "iopub.status.busy": "2025-08-18T10:54:27.250741Z",
     "iopub.status.idle": "2025-08-18T10:54:27.657179Z",
     "shell.execute_reply": "2025-08-18T10:54:27.656035Z"
    },
    "papermill": {
     "duration": 0.413439,
     "end_time": "2025-08-18T10:54:27.659282",
     "exception": false,
     "start_time": "2025-08-18T10:54:27.245843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_counts = df['label'].value_counts()\n",
    "plt.figure(figsize=(10, 6))\n",
    "class_counts.plot(kind='bar', color='skyblue', edgecolor='black')\n",
    "plt.title('Number of Samples per Class')\n",
    "plt.xlabel('Class Label')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01072778",
   "metadata": {
    "papermill": {
     "duration": 0.005941,
     "end_time": "2025-08-18T10:54:27.674649",
     "exception": false,
     "start_time": "2025-08-18T10:54:27.668708",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Pre-Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5730d8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:27.685810Z",
     "iopub.status.busy": "2025-08-18T10:54:27.685178Z",
     "iopub.status.idle": "2025-08-18T10:54:37.758812Z",
     "shell.execute_reply": "2025-08-18T10:54:37.758038Z"
    },
    "papermill": {
     "duration": 10.080368,
     "end_time": "2025-08-18T10:54:37.760110",
     "exception": false,
     "start_time": "2025-08-18T10:54:27.679742",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading images...\n",
      "Loaded 100 images...\n",
      "Loaded 200 images...\n",
      "Loaded 300 images...\n",
      "Loaded 400 images...\n",
      "Loaded 500 images...\n",
      "Loaded 600 images...\n",
      "Loaded 700 images...\n",
      "Loaded 800 images...\n",
      "Loaded 900 images...\n",
      "Loaded 1000 images...\n",
      "Loaded 1100 images...\n",
      "Loaded 1200 images...\n",
      "Loaded 1300 images...\n"
     ]
    }
   ],
   "source": [
    "print(\"Loading images...\")\n",
    "images = []\n",
    "labels = []\n",
    "for i, row in df.iterrows():\n",
    "    try:\n",
    "        img = load_img(row[\"filepath\"], target_size=(256, 256))\n",
    "        img_array = img_to_array(img) / 255.0  # normalize\n",
    "        images.append(img_array)\n",
    "        labels.append(row[\"label\"])\n",
    "        \n",
    "        if (i + 1) % 100 == 0:\n",
    "            print(f\"Loaded {i + 1} images...\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading {row['filepath']}: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "886ee7e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:37.772654Z",
     "iopub.status.busy": "2025-08-18T10:54:37.772416Z",
     "iopub.status.idle": "2025-08-18T10:54:38.089342Z",
     "shell.execute_reply": "2025-08-18T10:54:38.088424Z"
    },
    "papermill": {
     "duration": 0.324174,
     "end_time": "2025-08-18T10:54:38.090588",
     "exception": false,
     "start_time": "2025-08-18T10:54:37.766414",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Images shape: (1325, 256, 256, 3), Labels shape: (1325,)\n"
     ]
    }
   ],
   "source": [
    "images = np.array(images)\n",
    "labels = np.array(labels)\n",
    "print(f\"Images shape: {images.shape}, Labels shape: {labels.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0a4123f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:38.103214Z",
     "iopub.status.busy": "2025-08-18T10:54:38.102926Z",
     "iopub.status.idle": "2025-08-18T10:54:38.109421Z",
     "shell.execute_reply": "2025-08-18T10:54:38.108621Z"
    },
    "papermill": {
     "duration": 0.014144,
     "end_time": "2025-08-18T10:54:38.110642",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.096498",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integer labels (first 5): [4 4 4 4 4]\n",
      "One-hot labels (first 5): [[0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1. 0.]]\n",
      "Classes: ['Black' 'Brown' 'Murky' 'No_visible_blood' 'Red' 'Yellow']\n",
      "Number of classes: 6\n"
     ]
    }
   ],
   "source": [
    "# Encode labels\n",
    "le = LabelEncoder()\n",
    "labels_int = le.fit_transform(labels)\n",
    "labels_onehot = to_categorical(labels_int)\n",
    "\n",
    "print(\"Integer labels (first 5):\", labels_int[:5])\n",
    "print(\"One-hot labels (first 5):\", labels_onehot[:5])\n",
    "print(\"Classes:\", le.classes_)\n",
    "\n",
    "num_classes = len(le.classes_)\n",
    "print(f\"Number of classes: {num_classes}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1af27afd",
   "metadata": {
    "papermill": {
     "duration": 0.005304,
     "end_time": "2025-08-18T10:54:38.122262",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.116958",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8bbd2f61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:38.134144Z",
     "iopub.status.busy": "2025-08-18T10:54:38.133429Z",
     "iopub.status.idle": "2025-08-18T10:54:38.367354Z",
     "shell.execute_reply": "2025-08-18T10:54:38.366399Z"
    },
    "papermill": {
     "duration": 0.241459,
     "end_time": "2025-08-18T10:54:38.368935",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.127476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# First split: 80% train+val, 20% test\n",
    "X_temp, X_test, y_temp, y_test, labels_temp, labels_test = train_test_split(\n",
    "    images, labels_onehot, labels_int, \n",
    "    test_size=0.2, random_state=42, stratify=labels_int\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8cd275c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:38.380581Z",
     "iopub.status.busy": "2025-08-18T10:54:38.380343Z",
     "iopub.status.idle": "2025-08-18T10:54:38.630240Z",
     "shell.execute_reply": "2025-08-18T10:54:38.629576Z"
    },
    "papermill": {
     "duration": 0.257353,
     "end_time": "2025-08-18T10:54:38.631860",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.374507",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_val, y_train, y_val, labels_train, labels_val = train_test_split(\n",
    "    X_temp, y_temp, labels_temp,\n",
    "    test_size=0.25, random_state=42, stratify=labels_temp  \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "504042f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:38.643737Z",
     "iopub.status.busy": "2025-08-18T10:54:38.643462Z",
     "iopub.status.idle": "2025-08-18T10:54:38.647650Z",
     "shell.execute_reply": "2025-08-18T10:54:38.646978Z"
    },
    "papermill": {
     "duration": 0.011381,
     "end_time": "2025-08-18T10:54:38.648939",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.637558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set: (795, 256, 256, 3), (795, 6)\n",
      "Validation set: (265, 256, 256, 3), (265, 6)\n",
      "Test set: (265, 256, 256, 3), (265, 6)\n"
     ]
    }
   ],
   "source": [
    "print(f\"Train set: {X_train.shape}, {y_train.shape}\")\n",
    "print(f\"Validation set: {X_val.shape}, {y_val.shape}\")\n",
    "print(f\"Test set: {X_test.shape}, {y_test.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c7bbb33",
   "metadata": {
    "papermill": {
     "duration": 0.005224,
     "end_time": "2025-08-18T10:54:38.659569",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.654345",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "08afb09f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:38.670920Z",
     "iopub.status.busy": "2025-08-18T10:54:38.670666Z",
     "iopub.status.idle": "2025-08-18T10:54:41.847865Z",
     "shell.execute_reply": "2025-08-18T10:54:41.847111Z"
    },
    "papermill": {
     "duration": 3.184127,
     "end_time": "2025-08-18T10:54:41.849035",
     "exception": false,
     "start_time": "2025-08-18T10:54:38.664908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "I0000 00:00:1755514480.185783      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n",
      "I0000 00:00:1755514480.186518      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">254</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">254</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)   │           <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">127</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">127</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">125</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">125</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">62</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">60</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">50176</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │    <span style=\"color: #00af00; text-decoration-color: #00af00\">12,845,312</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">774</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m254\u001b[0m, \u001b[38;5;34m254\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │           \u001b[38;5;34m896\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m127\u001b[0m, \u001b[38;5;34m127\u001b[0m, \u001b[38;5;34m32\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m125\u001b[0m, \u001b[38;5;34m125\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m18,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m62\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m60\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │        \u001b[38;5;34m73,856\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m50176\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │    \u001b[38;5;34m12,845,312\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m32,896\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)              │           \u001b[38;5;34m774\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13,267,398</span> (50.61 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m13,267,398\u001b[0m (50.61 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13,267,398</span> (50.61 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m13,267,398\u001b[0m (50.61 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model = models.Sequential([\n",
    "    layers.Conv2D(32, (3,3), activation='relu', input_shape=(256, 256, 3)),\n",
    "    layers.MaxPooling2D((2,2)),\n",
    "    layers.Conv2D(64, (3,3), activation='relu'),\n",
    "    layers.MaxPooling2D((2,2)),\n",
    "    layers.Conv2D(128, (3,3), activation='relu'),\n",
    "    layers.MaxPooling2D((2,2)),\n",
    "    layers.Conv2D(256, (3,3), activation='relu'),\n",
    "    layers.MaxPooling2D((2,2)),\n",
    "    layers.Flatten(),\n",
    "    layers.Dense(256, activation='relu'),\n",
    "    layers.Dropout(0.5),\n",
    "    layers.Dense(128, activation='relu'),\n",
    "    layers.Dropout(0.3),\n",
    "    layers.Dense(num_classes, activation='softmax')\n",
    "])\n",
    "\n",
    "model.compile(\n",
    "    optimizer=Adam(learning_rate=0.001),\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy']\n",
    ")\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b8a5875f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:41.863990Z",
     "iopub.status.busy": "2025-08-18T10:54:41.863439Z",
     "iopub.status.idle": "2025-08-18T10:54:41.867628Z",
     "shell.execute_reply": "2025-08-18T10:54:41.866871Z"
    },
    "papermill": {
     "duration": 0.013141,
     "end_time": "2025-08-18T10:54:41.868894",
     "exception": false,
     "start_time": "2025-08-18T10:54:41.855753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Set up callbacks\n",
    "checkpoint = ModelCheckpoint(\n",
    "    'best_model.h5',\n",
    "    monitor='val_accuracy',\n",
    "    save_best_only=True,\n",
    "    mode='max',\n",
    "    verbose=1\n",
    ")\n",
    "\n",
    "early_stopping = EarlyStopping(\n",
    "    monitor='val_accuracy',\n",
    "    patience=5,\n",
    "    mode='max',\n",
    "    verbose=1,\n",
    "    restore_best_weights=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "61308f0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:54:41.881909Z",
     "iopub.status.busy": "2025-08-18T10:54:41.881434Z",
     "iopub.status.idle": "2025-08-18T10:55:49.854034Z",
     "shell.execute_reply": "2025-08-18T10:55:49.853166Z"
    },
    "papermill": {
     "duration": 67.980548,
     "end_time": "2025-08-18T10:55:49.855461",
     "exception": false,
     "start_time": "2025-08-18T10:54:41.874913",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1755514486.871496      61 service.cc:148] XLA service 0x7eb66000f250 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1755514486.873085      61 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1755514486.873271      61 service.cc:156]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n",
      "I0000 00:00:1755514487.355170      61 cuda_dnn.cc:529] Loaded cuDNN version 90300\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m 2/25\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m2s\u001b[0m 94ms/step - accuracy: 0.4375 - loss: 2.2197 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1755514494.938883      61 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 300ms/step - accuracy: 0.5162 - loss: 1.6875\n",
      "Epoch 1: val_accuracy improved from -inf to 0.56604, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 473ms/step - accuracy: 0.5171 - loss: 1.6782 - val_accuracy: 0.5660 - val_loss: 1.0915\n",
      "Epoch 2/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.5653 - loss: 1.1367\n",
      "Epoch 2: val_accuracy improved from 0.56604 to 0.63774, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 102ms/step - accuracy: 0.5655 - loss: 1.1363 - val_accuracy: 0.6377 - val_loss: 1.0840\n",
      "Epoch 3/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6076 - loss: 1.0447\n",
      "Epoch 3: val_accuracy did not improve from 0.63774\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6070 - loss: 1.0458 - val_accuracy: 0.6377 - val_loss: 0.9553\n",
      "Epoch 4/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6113 - loss: 1.0059\n",
      "Epoch 4: val_accuracy improved from 0.63774 to 0.64151, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 97ms/step - accuracy: 0.6099 - loss: 1.0076 - val_accuracy: 0.6415 - val_loss: 0.9399\n",
      "Epoch 5/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.5700 - loss: 1.0224\n",
      "Epoch 5: val_accuracy did not improve from 0.64151\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.5711 - loss: 1.0216 - val_accuracy: 0.6415 - val_loss: 0.9122\n",
      "Epoch 6/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 63ms/step - accuracy: 0.6319 - loss: 0.9588\n",
      "Epoch 6: val_accuracy did not improve from 0.64151\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6314 - loss: 0.9592 - val_accuracy: 0.6302 - val_loss: 0.9003\n",
      "Epoch 7/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.5763 - loss: 1.0260\n",
      "Epoch 7: val_accuracy improved from 0.64151 to 0.64906, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 93ms/step - accuracy: 0.5766 - loss: 1.0249 - val_accuracy: 0.6491 - val_loss: 0.8934\n",
      "Epoch 8/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6228 - loss: 0.9751\n",
      "Epoch 8: val_accuracy did not improve from 0.64906\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 74ms/step - accuracy: 0.6229 - loss: 0.9753 - val_accuracy: 0.6453 - val_loss: 0.9061\n",
      "Epoch 9/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6293 - loss: 0.9306\n",
      "Epoch 9: val_accuracy improved from 0.64906 to 0.65283, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 93ms/step - accuracy: 0.6288 - loss: 0.9317 - val_accuracy: 0.6528 - val_loss: 0.9047\n",
      "Epoch 10/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6462 - loss: 0.9481\n",
      "Epoch 10: val_accuracy did not improve from 0.65283\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6457 - loss: 0.9479 - val_accuracy: 0.6453 - val_loss: 0.9319\n",
      "Epoch 11/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.5992 - loss: 0.9654\n",
      "Epoch 11: val_accuracy improved from 0.65283 to 0.65660, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 95ms/step - accuracy: 0.6000 - loss: 0.9643 - val_accuracy: 0.6566 - val_loss: 0.9039\n",
      "Epoch 12/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.6749 - loss: 0.8749\n",
      "Epoch 12: val_accuracy improved from 0.65660 to 0.66792, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 95ms/step - accuracy: 0.6729 - loss: 0.8770 - val_accuracy: 0.6679 - val_loss: 0.8868\n",
      "Epoch 13/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.6292 - loss: 0.9008\n",
      "Epoch 13: val_accuracy did not improve from 0.66792\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6292 - loss: 0.9005 - val_accuracy: 0.6679 - val_loss: 0.8680\n",
      "Epoch 14/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6455 - loss: 0.8477\n",
      "Epoch 14: val_accuracy did not improve from 0.66792\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6452 - loss: 0.8492 - val_accuracy: 0.6264 - val_loss: 0.8819\n",
      "Epoch 15/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6904 - loss: 0.8570\n",
      "Epoch 15: val_accuracy did not improve from 0.66792\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6893 - loss: 0.8577 - val_accuracy: 0.6604 - val_loss: 0.8903\n",
      "Epoch 16/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6409 - loss: 0.8591\n",
      "Epoch 16: val_accuracy did not improve from 0.66792\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6410 - loss: 0.8592 - val_accuracy: 0.6642 - val_loss: 0.8603\n",
      "Epoch 17/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6553 - loss: 0.8160\n",
      "Epoch 17: val_accuracy improved from 0.66792 to 0.67925, saving model to best_model.h5\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 94ms/step - accuracy: 0.6551 - loss: 0.8169 - val_accuracy: 0.6792 - val_loss: 0.8709\n",
      "Epoch 18/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.6548 - loss: 0.8072\n",
      "Epoch 18: val_accuracy did not improve from 0.67925\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6553 - loss: 0.8063 - val_accuracy: 0.6679 - val_loss: 0.8731\n",
      "Epoch 19/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.6864 - loss: 0.7532\n",
      "Epoch 19: val_accuracy did not improve from 0.67925\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.6861 - loss: 0.7536 - val_accuracy: 0.6717 - val_loss: 0.9171\n",
      "Epoch 20/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.6950 - loss: 0.7536\n",
      "Epoch 20: val_accuracy did not improve from 0.67925\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 77ms/step - accuracy: 0.6953 - loss: 0.7531 - val_accuracy: 0.6642 - val_loss: 0.9401\n",
      "Epoch 21/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.7175 - loss: 0.6775\n",
      "Epoch 21: val_accuracy did not improve from 0.67925\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 75ms/step - accuracy: 0.7174 - loss: 0.6783 - val_accuracy: 0.6377 - val_loss: 1.0013\n",
      "Epoch 22/30\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.7288 - loss: 0.7014\n",
      "Epoch 22: val_accuracy did not improve from 0.67925\n",
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 74ms/step - accuracy: 0.7283 - loss: 0.7022 - val_accuracy: 0.6415 - val_loss: 0.9366\n",
      "Epoch 22: early stopping\n",
      "Restoring model weights from the end of the best epoch: 17.\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    validation_data=(X_val, y_val),\n",
    "    epochs=30,\n",
    "    batch_size=32,\n",
    "    callbacks=[checkpoint, early_stopping],\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9f55eb48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:55:49.921189Z",
     "iopub.status.busy": "2025-08-18T10:55:49.920903Z",
     "iopub.status.idle": "2025-08-18T10:55:53.696120Z",
     "shell.execute_reply": "2025-08-18T10:55:53.695283Z"
    },
    "papermill": {
     "duration": 3.809467,
     "end_time": "2025-08-18T10:55:53.697401",
     "exception": false,
     "start_time": "2025-08-18T10:55:49.887934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 83ms/step - accuracy: 0.7221 - loss: 0.7377\n",
      "Train Accuracy: 70.31%\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy = model.evaluate(X_train, y_train)\n",
    "print(f\"Train Accuracy: {accuracy*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "447ba146",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:55:53.817822Z",
     "iopub.status.busy": "2025-08-18T10:55:53.817483Z",
     "iopub.status.idle": "2025-08-18T10:55:54.639031Z",
     "shell.execute_reply": "2025-08-18T10:55:54.638338Z"
    },
    "papermill": {
     "duration": 0.907456,
     "end_time": "2025-08-18T10:55:54.640212",
     "exception": false,
     "start_time": "2025-08-18T10:55:53.732756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step - accuracy: 0.6622 - loss: 0.8614\n",
      "Validation Accuracy: 67.92%\n"
     ]
    }
   ],
   "source": [
    "val_loss, val_acc = model.evaluate(X_val, y_val)\n",
    "print(f\"Validation Accuracy: {val_acc*100:.2f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bef40dd",
   "metadata": {
    "papermill": {
     "duration": 0.031584,
     "end_time": "2025-08-18T10:55:54.703739",
     "exception": false,
     "start_time": "2025-08-18T10:55:54.672155",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loss and Accuracy Matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d770e516",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:55:54.767012Z",
     "iopub.status.busy": "2025-08-18T10:55:54.766774Z",
     "iopub.status.idle": "2025-08-18T10:55:55.165144Z",
     "shell.execute_reply": "2025-08-18T10:55:55.164348Z"
    },
    "papermill": {
     "duration": 0.431862,
     "end_time": "2025-08-18T10:55:55.166497",
     "exception": false,
     "start_time": "2025-08-18T10:55:54.734635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot training history\n",
    "plt.figure(figsize=(15, 5))\n",
    "\n",
    "# Plot Loss\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history.history['loss'], label='Training Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "# Plot Accuracy\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Model Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd7c3e48",
   "metadata": {
    "papermill": {
     "duration": 0.034193,
     "end_time": "2025-08-18T10:55:55.235111",
     "exception": false,
     "start_time": "2025-08-18T10:55:55.200918",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Other Matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d50d48bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:55:55.301644Z",
     "iopub.status.busy": "2025-08-18T10:55:55.301156Z",
     "iopub.status.idle": "2025-08-18T10:55:55.475230Z",
     "shell.execute_reply": "2025-08-18T10:55:55.474381Z"
    },
    "papermill": {
     "duration": 0.209109,
     "end_time": "2025-08-18T10:55:55.476830",
     "exception": false,
     "start_time": "2025-08-18T10:55:55.267721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load the best model\n",
    "best_model = tf.keras.models.load_model('best_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e700f205",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:55:55.548233Z",
     "iopub.status.busy": "2025-08-18T10:55:55.547955Z",
     "iopub.status.idle": "2025-08-18T10:56:00.645138Z",
     "shell.execute_reply": "2025-08-18T10:56:00.644442Z"
    },
    "papermill": {
     "duration": 5.133967,
     "end_time": "2025-08-18T10:56:00.646379",
     "exception": false,
     "start_time": "2025-08-18T10:55:55.512412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m25/25\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 42ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 55ms/step\n",
      "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on all sets\n",
    "train_preds = np.argmax(best_model.predict(X_train), axis=1)\n",
    "val_preds = np.argmax(best_model.predict(X_val), axis=1)\n",
    "test_preds = np.argmax(best_model.predict(X_test), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9309ff62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:00.719923Z",
     "iopub.status.busy": "2025-08-18T10:56:00.719407Z",
     "iopub.status.idle": "2025-08-18T10:56:00.724077Z",
     "shell.execute_reply": "2025-08-18T10:56:00.723408Z"
    },
    "papermill": {
     "duration": 0.042007,
     "end_time": "2025-08-18T10:56:00.725334",
     "exception": false,
     "start_time": "2025-08-18T10:56:00.683327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert one-hot labels back to integers for comparison\n",
    "y_train_int = np.argmax(y_train, axis=1)\n",
    "y_val_int = np.argmax(y_val, axis=1)\n",
    "y_test_int = np.argmax(y_test, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3e6e0ab5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:00.798993Z",
     "iopub.status.busy": "2025-08-18T10:56:00.798368Z",
     "iopub.status.idle": "2025-08-18T10:56:00.802395Z",
     "shell.execute_reply": "2025-08-18T10:56:00.801699Z"
    },
    "papermill": {
     "duration": 0.04029,
     "end_time": "2025-08-18T10:56:00.803484",
     "exception": false,
     "start_time": "2025-08-18T10:56:00.763194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Calculate accuracies\n",
    "train_accuracy = np.mean(y_train_int == train_preds)\n",
    "val_accuracy = np.mean(y_val_int == val_preds)\n",
    "test_accuracy = np.mean(y_test_int == test_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b076ac3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:00.875790Z",
     "iopub.status.busy": "2025-08-18T10:56:00.875288Z",
     "iopub.status.idle": "2025-08-18T10:56:00.879274Z",
     "shell.execute_reply": "2025-08-18T10:56:00.878686Z"
    },
    "papermill": {
     "duration": 0.042934,
     "end_time": "2025-08-18T10:56:00.880233",
     "exception": false,
     "start_time": "2025-08-18T10:56:00.837299",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.7031\n",
      "Validation Accuracy: 0.6792\n",
      "Test Accuracy: 0.6755\n"
     ]
    }
   ],
   "source": [
    "print(f\"Train Accuracy: {train_accuracy:.4f}\")\n",
    "print(f\"Validation Accuracy: {val_accuracy:.4f}\")\n",
    "print(f\"Test Accuracy: {test_accuracy:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cfde3c89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:00.952931Z",
     "iopub.status.busy": "2025-08-18T10:56:00.952269Z",
     "iopub.status.idle": "2025-08-18T10:56:00.967751Z",
     "shell.execute_reply": "2025-08-18T10:56:00.966798Z"
    },
    "papermill": {
     "duration": 0.053921,
     "end_time": "2025-08-18T10:56:00.969134",
     "exception": false,
     "start_time": "2025-08-18T10:56:00.915213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Train Set Classification Report ===\n",
      "                  precision    recall  f1-score   support\n",
      "\n",
      "           Black       1.00      0.17      0.29        65\n",
      "           Brown       0.52      0.45      0.48       134\n",
      "           Murky       0.00      0.00      0.00        20\n",
      "No_visible_blood       0.49      0.79      0.61        92\n",
      "             Red       0.80      0.92      0.86       450\n",
      "          Yellow       0.00      0.00      0.00        34\n",
      "\n",
      "        accuracy                           0.70       795\n",
      "       macro avg       0.47      0.39      0.37       795\n",
      "    weighted avg       0.68      0.70      0.66       795\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Detailed classification report for test set\n",
    "print(\"\\n=== Train Set Classification Report ===\")\n",
    "print(classification_report(y_train_int, train_preds, target_names=le.classes_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1e6e18d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:01.044732Z",
     "iopub.status.busy": "2025-08-18T10:56:01.044402Z",
     "iopub.status.idle": "2025-08-18T10:56:01.056027Z",
     "shell.execute_reply": "2025-08-18T10:56:01.054879Z"
    },
    "papermill": {
     "duration": 0.050545,
     "end_time": "2025-08-18T10:56:01.057522",
     "exception": false,
     "start_time": "2025-08-18T10:56:01.006977",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Validation Set Classification Report ===\n",
      "                  precision    recall  f1-score   support\n",
      "\n",
      "           Black       1.00      0.05      0.09        22\n",
      "           Brown       0.41      0.36      0.39        44\n",
      "           Murky       0.00      0.00      0.00         7\n",
      "No_visible_blood       0.49      0.70      0.58        30\n",
      "             Red       0.78      0.95      0.86       150\n",
      "          Yellow       0.00      0.00      0.00        12\n",
      "\n",
      "        accuracy                           0.68       265\n",
      "       macro avg       0.45      0.34      0.32       265\n",
      "    weighted avg       0.65      0.68      0.62       265\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Detailed classification report for test set\n",
    "print(\"\\n=== Validation Set Classification Report ===\")\n",
    "print(classification_report(y_val_int, val_preds, target_names=le.classes_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2f4dc1b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:01.134639Z",
     "iopub.status.busy": "2025-08-18T10:56:01.133947Z",
     "iopub.status.idle": "2025-08-18T10:56:01.145902Z",
     "shell.execute_reply": "2025-08-18T10:56:01.144866Z"
    },
    "papermill": {
     "duration": 0.050565,
     "end_time": "2025-08-18T10:56:01.147206",
     "exception": false,
     "start_time": "2025-08-18T10:56:01.096641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Test Set Classification Report ===\n",
      "                  precision    recall  f1-score   support\n",
      "\n",
      "           Black       1.00      0.05      0.09        22\n",
      "           Brown       0.47      0.52      0.49        44\n",
      "           Murky       0.00      0.00      0.00         7\n",
      "No_visible_blood       0.43      0.53      0.48        30\n",
      "             Red       0.78      0.93      0.85       150\n",
      "          Yellow       0.00      0.00      0.00        12\n",
      "\n",
      "        accuracy                           0.68       265\n",
      "       macro avg       0.45      0.34      0.32       265\n",
      "    weighted avg       0.65      0.68      0.62       265\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "# Detailed classification report for test set\n",
    "print(\"\\n=== Test Set Classification Report ===\")\n",
    "print(classification_report(y_test_int, test_preds, target_names=le.classes_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1c401d06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-18T10:56:01.221879Z",
     "iopub.status.busy": "2025-08-18T10:56:01.221350Z",
     "iopub.status.idle": "2025-08-18T10:56:01.540749Z",
     "shell.execute_reply": "2025-08-18T10:56:01.539953Z"
    },
    "papermill": {
     "duration": 0.356878,
     "end_time": "2025-08-18T10:56:01.542029",
     "exception": false,
     "start_time": "2025-08-18T10:56:01.185151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix for test set\n",
    "plt.figure(figsize=(10, 8))\n",
    "cm = confusion_matrix(y_test_int, test_preds)\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n",
    "            xticklabels=le.classes_, yticklabels=le.classes_)\n",
    "plt.title('Confusion Matrix - Test Set')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.xticks(rotation=45)\n",
    "plt.yticks(rotation=0)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8084412,
     "sourceId": 12787160,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 128.092408,
   "end_time": "2025-08-18T10:56:05.356632",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-18T10:53:57.264224",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
